#!/bin/bash
# Script de configuraci√≥n y verificaci√≥n del nuevo middleware

echo "üöÄ Verificando la implementaci√≥n del middleware..."

# 1. Verificar que los archivos existen
echo "üìÅ Verificando archivos creados..."

files_to_check=(
    "middleware.js"
    "app/lib/metrics.js"
    "app/utils/cookieManager.js"
)

all_files_exist=true
for file in "${files_to_check[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úÖ $file existe"
    else
        echo "‚ùå $file NO existe"
        all_files_exist=false
    fi
done

if [ "$all_files_exist" = false ]; then
    echo "‚ùå Faltan archivos. Por favor, cr√©alos primero."
    exit 1
fi

# 2. Verificar dependencias
echo -e "\nüì¶ Verificando dependencias..."
if grep -q "@supabase/auth-helpers-nextjs" package.json; then
    echo "‚úÖ @supabase/auth-helpers-nextjs instalado"
else
    echo "‚ùå @supabase/auth-helpers-nextjs NO instalado"
    echo "Ejecuta: npm install @supabase/auth-helpers-nextjs"
    exit 1
fi

# 3. Verificar variables de entorno
echo -e "\nüîê Verificando variables de entorno..."
if [ -f ".env.local" ]; then
    if grep -q "NEXT_PUBLIC_SUPABASE_URL" .env.local; then
        echo "‚úÖ NEXT_PUBLIC_SUPABASE_URL configurada"
    else
        echo "‚ùå NEXT_PUBLIC_SUPABASE_URL NO configurada"
    fi
    
    if grep -q "NEXT_PUBLIC_SUPABASE_ANON_KEY" .env.local; then
        echo "‚úÖ NEXT_PUBLIC_SUPABASE_ANON_KEY configurada"
    else
        echo "‚ùå NEXT_PUBLIC_SUPABASE_ANON_KEY NO configurada"
    fi
else
    echo "‚ö†Ô∏è  No se encontr√≥ .env.local"
fi

# 4. Crear archivo de test manual
echo -e "\nüìù Creando gu√≠a de testing manual..."

cat > TEST_MIDDLEWARE.md << 'EOF'
# üß™ Gu√≠a de Testing del Middleware

## Tests B√°sicos (5 min)

### 1. Test de Login
1. Abre la consola del navegador (F12)
2. Ve a `/login`
3. Inicia sesi√≥n con credenciales v√°lidas
4. Verifica en consola:
   - `[Middleware]` logs mostrando performance
   - No hay errores
5. Verifica cookies (en Application > Cookies):
   - `coggni-user`
   - `coggni-user-type`
   - `coggni-last-activity`
   - `coggni-session-cache`

### 2. Test de Rutas Protegidas
1. Cierra sesi√≥n
2. Intenta acceder a `/collections`
3. Debe redirigir a `/login?redirect=/collections`

### 3. Test de Cache
1. Con sesi√≥n activa, navega entre p√°ginas
2. En los logs de consola deber√≠as ver:
   - `[Middleware] /collections - XXms (cached)` despu√©s de la primera visita
   - El tiempo debe ser <10ms cuando est√° cacheado

### 4. Test de Timeout (r√°pido)
1. Inicia sesi√≥n
2. En DevTools > Application > Cookies
3. Edita `coggni-last-activity`
4. Cambia el valor a: `1` (timestamp muy viejo)
5. Navega a cualquier p√°gina
6. Debe cerrar sesi√≥n y mostrar mensaje de timeout

### 5. Test de Limpieza
1. En consola, ejecuta:
```javascript
// Ver todas las cookies
document.cookie.split(';').forEach(c => console.log(c.trim()))

// Borrar solo algunas cookies (simular estado inconsistente)
document.cookie = "coggni-user=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/"
```
2. Recarga la p√°gina
3. Debe limpiar todas las cookies y redirigir a login

## Tests Avanzados (10 min)

### 6. Test de Performance
```javascript
// En consola, ejecutar para ver m√©tricas acumuladas
console.log('Esperando m√©tricas...')
setTimeout(() => {
  // Las m√©tricas se loguean cada 30 segundos o cada 100 requests
  console.log('Revisa los logs anteriores para ver el resumen de m√©tricas')
}, 5000)
```

### 7. Test de Race Condition
1. Abre 2 pesta√±as con la app
2. Navega r√°pidamente entre p√°ginas en ambas
3. No debe haber comportamiento extra√±o

### 8. Test Mobile
1. Abre en el m√≥vil (o modo responsive)
2. Repite tests 1-3
3. Verifica que funcione igual

## Verificaci√≥n de Logs

En desarrollo, deber√≠as ver logs como:
```
[Middleware] /collections - 45ms (miss)
[Middleware] /collections - 3ms (hit)
[Supabase Init] Client created: true
[AuthContext] Login successful
```

## ‚úÖ Checklist Final
- [ ] Login/logout funciona
- [ ] Rutas protegidas redirigen
- [ ] Cache mejora performance
- [ ] Timeout cierra sesi√≥n
- [ ] No hay loops de redirect
- [ ] Mobile funciona igual
- [ ] Logs sin errores
EOF

echo "‚úÖ Gu√≠a de testing creada en TEST_MIDDLEWARE.md"

# 5. Mostrar resumen
echo -e "\nüìä RESUMEN:"
echo "==========="
echo "‚úÖ Archivos verificados"
echo "‚úÖ Dependencias verificadas"
echo "üìã Gu√≠a de testing creada"
echo ""
echo "üéØ Pr√≥ximos pasos:"
echo "1. Revisa TEST_MIDDLEWARE.md"
echo "2. Ejecuta los tests manualmente"
echo "3. Si todo funciona, hacer commit"
echo "4. Deploy a staging/preview"
echo ""
echo "üí° Tip: Abre TEST_MIDDLEWARE.md y sigue la gu√≠a paso a paso"